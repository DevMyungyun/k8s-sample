input {
  beats {
    port => "5044"
  }
}

filter {
# Container logs are received with variable named service
# Since it is in json format, we can decode it via json filter plugin.
  if [service] == "k8s-logs" {
    date {
      timezone => "Asia/Seoul"
      match => [ "timestamp", "ISO8601",]
      target => "timestamp"
    }

	grok {
      match => {
        "message" => "(?<text_log>[^{]*) %{GREEDYDATA:json_log}"
      }
    }

# filebeat에서  k8s 관련 field가 없는 경우
  if ![kubernetes] {
    mutate {
      add_field => { "[@metadata][k8s-field-check]" => "false" }
    }
  }
   # mutate plugin 사용시
   #mutate {
      #add_field => { "pod-name" => "%{[kubernetes][container][name]}" }
      #add_field => { "namespace" => "%{[kubernetes][namespace]}" }
    #}

  # container별 특정 처리시
  #if "%{[kubernetes][container][name]}" == "chat-v2" {
  #}

}

  mutate {
    # @metadata is not exposed outside of Logstash by default.
    add_field => { "[@metadata][service]" => "%{service}" }
    add_field => { "[@metadata][service-detail]" => "%{service}-%{+YYYY.MM.dd}" }
    # since we added service to metadata, we no longer need ["service"] field.
    remove_field => ["service"]
  }
}

output {
  #  [Debbug] Elasticsearch로 보내는 데이터 체크
  #stdout { codec => rubydebug }
  #file {
  #     path => "/var/log/logstash/k8s_logstash.log"
  #    codec => rubydebug
  #}

  if [@metadata][service] == "k8s-logs" and [@metadata][k8s-field-check] == "false" {

    elasticsearch {
      hosts => [ "http://localhost:9200" ]
      index => "k8s-etc-logs-%{+YYYY.MM.dd}"
    }

  } else if [@metadata][service] == "k8s-logs" {

    elasticsearch {
      hosts => [ "http://localhost:9200" ]
      index => "k8s-%{[kubernetes][namespace]}-%{[kubernetes][container][name]}-%{+YYYY.MM.dd}"
    }

  } else {

   elasticsearch {
      hosts => [ "http://localhost:9200" ]
      index => "onpromise-logs-%{+YYYY.MM.dd}"
    }

  }

}